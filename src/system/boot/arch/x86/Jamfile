SubDir HAIKU_TOP src system boot arch x86 ;

DEFINES += _BOOT_MODE ;

local kernelArchSources =
	arch_elf.cpp
;

local kernelArchSpecificSources ;
local kernelLibArchSpecificSources ;
local additionalFlags ;

if $(TARGET_ARCH) = x86_64 && $(TARGET_BOOT_PLATFORM) != bios_ia32 {
	kernelArchSpecificSources =
		cpuid.cpp
	;

	kernelLibArchSpecificSources =
		arch_string.cpp
	;

	additionalFlags = -std=c++11 ;
} else {
	kernelArchSpecificSources =
		cpuid.S
	;

	kernelLibArchSpecificSources =
		arch_string.S
	;
}

local librootOsArchSources =
	byteorder.S
;

BootMergeObject boot_arch_$(TARGET_KERNEL_ARCH).o :
	$(kernelArchSources)
	$(kernelArchSpecificSources)
	$(kernelLibArchSpecificSources)
	$(librootOsArchSources)
	: $(additionalFlags)
;

SEARCH on [ FGristFiles $(kernelArchSources) ]
    = [ FDirName $(HAIKU_TOP) src system kernel arch x86 ] ;

if $(TARGET_ARCH) = x86_64 && $(TARGET_BOOT_PLATFORM) != bios_ia32 {
SEARCH on [ FGristFiles $(kernelArchSpecificSources) ]
    = [ FDirName $(HAIKU_TOP) src system kernel arch x86 64 ] ;
SEARCH on [ FGristFiles $(kernelLibArchSpecificSources) ]
    = [ FDirName $(HAIKU_TOP) src system libroot posix string arch x86_64 ] ;
} else {
SEARCH on [ FGristFiles $(kernelArchSpecificSources) ]
    = [ FDirName $(HAIKU_TOP) src system kernel arch x86 32 ] ;
SEARCH on [ FGristFiles $(kernelLibArchSpecificSources) ]
    = [ FDirName $(HAIKU_TOP) src system kernel lib arch x86 ] ;
}

SEARCH on [ FGristFiles $(librootOsArchSources) ]
    = [ FDirName $(HAIKU_TOP) src system libroot os arch x86 ] ;
